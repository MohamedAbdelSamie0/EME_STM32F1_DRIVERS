
GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000404  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000534  0800053c  0001053c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000534  08000534  0001053c  2**0
                  CONTENTS
  4 .ARM          00000000  08000534  08000534  0001053c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000534  0800053c  0001053c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000534  08000534  00010534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000538  08000538  00010538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001053c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800053c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800053c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001053c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000487  00000000  00000000  00010565  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001e0  00000000  00000000  000109ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000b8  00000000  00000000  00010bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000080  00000000  00000000  00010c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000013e9  00000000  00000000  00010d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000007e3  00000000  00000000  000120f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00004444  00000000  00000000  000128d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00016d18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001b4  00000000  00000000  00016d94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800051c 	.word	0x0800051c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800051c 	.word	0x0800051c

08000170 <GPIO_voidSetPinDirection>:
 * reentrant:	Reentrant function
 * input:		port, pin, mode(input or output modes)
 * output:		none
 */
void  GPIO_voidSetPinDirection(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Mode)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
 800017a:	460b      	mov	r3, r1
 800017c:	71bb      	strb	r3, [r7, #6]
 800017e:	4613      	mov	r3, r2
 8000180:	717b      	strb	r3, [r7, #5]
	if(Copy_u8Port < 3)
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	2b02      	cmp	r3, #2
 8000186:	f200 80b6 	bhi.w	80002f6 <GPIO_voidSetPinDirection+0x186>
	{
		switch (Copy_u8Port)
 800018a:	79fb      	ldrb	r3, [r7, #7]
 800018c:	2b01      	cmp	r3, #1
 800018e:	d03d      	beq.n	800020c <GPIO_voidSetPinDirection+0x9c>
 8000190:	2b02      	cmp	r3, #2
 8000192:	d073      	beq.n	800027c <GPIO_voidSetPinDirection+0x10c>
 8000194:	2b00      	cmp	r3, #0
 8000196:	d000      	beq.n	800019a <GPIO_voidSetPinDirection+0x2a>
		                GPIO_C_PORT->CRH &= ~((0b1111)      << ((Copy_u8Pin - 8) * 4));
		                GPIO_C_PORT->CRH |=  ((Copy_u8Mode) << ((Copy_u8Pin - 8) * 4));
		            }
		            break;
		        default:
		        	break;
 8000198:	e0ad      	b.n	80002f6 <GPIO_voidSetPinDirection+0x186>
		            if (Copy_u8Pin <= 7)
 800019a:	79bb      	ldrb	r3, [r7, #6]
 800019c:	2b07      	cmp	r3, #7
 800019e:	d817      	bhi.n	80001d0 <GPIO_voidSetPinDirection+0x60>
		                GPIO_A_PORT->CRL &= ~((0b1111) << (Copy_u8Pin * 4));
 80001a0:	4b57      	ldr	r3, [pc, #348]	; (8000300 <GPIO_voidSetPinDirection+0x190>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	79ba      	ldrb	r2, [r7, #6]
 80001a6:	0092      	lsls	r2, r2, #2
 80001a8:	210f      	movs	r1, #15
 80001aa:	fa01 f202 	lsl.w	r2, r1, r2
 80001ae:	43d2      	mvns	r2, r2
 80001b0:	4611      	mov	r1, r2
 80001b2:	4a53      	ldr	r2, [pc, #332]	; (8000300 <GPIO_voidSetPinDirection+0x190>)
 80001b4:	400b      	ands	r3, r1
 80001b6:	6013      	str	r3, [r2, #0]
		                GPIO_A_PORT->CRL |=  ((Copy_u8Mode) << (Copy_u8Pin * 4));
 80001b8:	4b51      	ldr	r3, [pc, #324]	; (8000300 <GPIO_voidSetPinDirection+0x190>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	7979      	ldrb	r1, [r7, #5]
 80001be:	79ba      	ldrb	r2, [r7, #6]
 80001c0:	0092      	lsls	r2, r2, #2
 80001c2:	fa01 f202 	lsl.w	r2, r1, r2
 80001c6:	4611      	mov	r1, r2
 80001c8:	4a4d      	ldr	r2, [pc, #308]	; (8000300 <GPIO_voidSetPinDirection+0x190>)
 80001ca:	430b      	orrs	r3, r1
 80001cc:	6013      	str	r3, [r2, #0]
		            break;
 80001ce:	e08d      	b.n	80002ec <GPIO_voidSetPinDirection+0x17c>
		            else if (Copy_u8Pin <= 15)
 80001d0:	79bb      	ldrb	r3, [r7, #6]
 80001d2:	2b0f      	cmp	r3, #15
 80001d4:	f200 808a 	bhi.w	80002ec <GPIO_voidSetPinDirection+0x17c>
		                GPIO_A_PORT->CRH &= ~((0b1111)      << ((Copy_u8Pin - 8) * 4));
 80001d8:	4b49      	ldr	r3, [pc, #292]	; (8000300 <GPIO_voidSetPinDirection+0x190>)
 80001da:	685b      	ldr	r3, [r3, #4]
 80001dc:	79ba      	ldrb	r2, [r7, #6]
 80001de:	3a08      	subs	r2, #8
 80001e0:	0092      	lsls	r2, r2, #2
 80001e2:	210f      	movs	r1, #15
 80001e4:	fa01 f202 	lsl.w	r2, r1, r2
 80001e8:	43d2      	mvns	r2, r2
 80001ea:	4611      	mov	r1, r2
 80001ec:	4a44      	ldr	r2, [pc, #272]	; (8000300 <GPIO_voidSetPinDirection+0x190>)
 80001ee:	400b      	ands	r3, r1
 80001f0:	6053      	str	r3, [r2, #4]
		                GPIO_A_PORT->CRH |=  ((Copy_u8Mode) << ((Copy_u8Pin - 8) * 4));
 80001f2:	4b43      	ldr	r3, [pc, #268]	; (8000300 <GPIO_voidSetPinDirection+0x190>)
 80001f4:	685b      	ldr	r3, [r3, #4]
 80001f6:	7979      	ldrb	r1, [r7, #5]
 80001f8:	79ba      	ldrb	r2, [r7, #6]
 80001fa:	3a08      	subs	r2, #8
 80001fc:	0092      	lsls	r2, r2, #2
 80001fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000202:	4611      	mov	r1, r2
 8000204:	4a3e      	ldr	r2, [pc, #248]	; (8000300 <GPIO_voidSetPinDirection+0x190>)
 8000206:	430b      	orrs	r3, r1
 8000208:	6053      	str	r3, [r2, #4]
		            break;
 800020a:	e06f      	b.n	80002ec <GPIO_voidSetPinDirection+0x17c>
		            if (Copy_u8Pin <= 7)
 800020c:	79bb      	ldrb	r3, [r7, #6]
 800020e:	2b07      	cmp	r3, #7
 8000210:	d817      	bhi.n	8000242 <GPIO_voidSetPinDirection+0xd2>
		                GPIO_B_PORT->CRL &= ~((0b1111)      << (Copy_u8Pin * 4));
 8000212:	4b3c      	ldr	r3, [pc, #240]	; (8000304 <GPIO_voidSetPinDirection+0x194>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	79ba      	ldrb	r2, [r7, #6]
 8000218:	0092      	lsls	r2, r2, #2
 800021a:	210f      	movs	r1, #15
 800021c:	fa01 f202 	lsl.w	r2, r1, r2
 8000220:	43d2      	mvns	r2, r2
 8000222:	4611      	mov	r1, r2
 8000224:	4a37      	ldr	r2, [pc, #220]	; (8000304 <GPIO_voidSetPinDirection+0x194>)
 8000226:	400b      	ands	r3, r1
 8000228:	6013      	str	r3, [r2, #0]
		                GPIO_B_PORT->CRL |=  ((Copy_u8Mode) << (Copy_u8Pin * 4));
 800022a:	4b36      	ldr	r3, [pc, #216]	; (8000304 <GPIO_voidSetPinDirection+0x194>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	7979      	ldrb	r1, [r7, #5]
 8000230:	79ba      	ldrb	r2, [r7, #6]
 8000232:	0092      	lsls	r2, r2, #2
 8000234:	fa01 f202 	lsl.w	r2, r1, r2
 8000238:	4611      	mov	r1, r2
 800023a:	4a32      	ldr	r2, [pc, #200]	; (8000304 <GPIO_voidSetPinDirection+0x194>)
 800023c:	430b      	orrs	r3, r1
 800023e:	6013      	str	r3, [r2, #0]
		            break;
 8000240:	e056      	b.n	80002f0 <GPIO_voidSetPinDirection+0x180>
		            else if (Copy_u8Pin <= 15)
 8000242:	79bb      	ldrb	r3, [r7, #6]
 8000244:	2b0f      	cmp	r3, #15
 8000246:	d853      	bhi.n	80002f0 <GPIO_voidSetPinDirection+0x180>
		                GPIO_B_PORT->CRH &= ~((0b1111)      << ((Copy_u8Pin - 8) * 4));
 8000248:	4b2e      	ldr	r3, [pc, #184]	; (8000304 <GPIO_voidSetPinDirection+0x194>)
 800024a:	685b      	ldr	r3, [r3, #4]
 800024c:	79ba      	ldrb	r2, [r7, #6]
 800024e:	3a08      	subs	r2, #8
 8000250:	0092      	lsls	r2, r2, #2
 8000252:	210f      	movs	r1, #15
 8000254:	fa01 f202 	lsl.w	r2, r1, r2
 8000258:	43d2      	mvns	r2, r2
 800025a:	4611      	mov	r1, r2
 800025c:	4a29      	ldr	r2, [pc, #164]	; (8000304 <GPIO_voidSetPinDirection+0x194>)
 800025e:	400b      	ands	r3, r1
 8000260:	6053      	str	r3, [r2, #4]
		                GPIO_B_PORT->CRH |=  ((Copy_u8Mode) << ((Copy_u8Pin - 8) * 4));
 8000262:	4b28      	ldr	r3, [pc, #160]	; (8000304 <GPIO_voidSetPinDirection+0x194>)
 8000264:	685b      	ldr	r3, [r3, #4]
 8000266:	7979      	ldrb	r1, [r7, #5]
 8000268:	79ba      	ldrb	r2, [r7, #6]
 800026a:	3a08      	subs	r2, #8
 800026c:	0092      	lsls	r2, r2, #2
 800026e:	fa01 f202 	lsl.w	r2, r1, r2
 8000272:	4611      	mov	r1, r2
 8000274:	4a23      	ldr	r2, [pc, #140]	; (8000304 <GPIO_voidSetPinDirection+0x194>)
 8000276:	430b      	orrs	r3, r1
 8000278:	6053      	str	r3, [r2, #4]
		            break;
 800027a:	e039      	b.n	80002f0 <GPIO_voidSetPinDirection+0x180>
		            if (Copy_u8Pin <= 7)
 800027c:	79bb      	ldrb	r3, [r7, #6]
 800027e:	2b07      	cmp	r3, #7
 8000280:	d817      	bhi.n	80002b2 <GPIO_voidSetPinDirection+0x142>
		                GPIO_C_PORT->CRL &= ~((0b1111)      << (Copy_u8Pin * 4));
 8000282:	4b21      	ldr	r3, [pc, #132]	; (8000308 <GPIO_voidSetPinDirection+0x198>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	79ba      	ldrb	r2, [r7, #6]
 8000288:	0092      	lsls	r2, r2, #2
 800028a:	210f      	movs	r1, #15
 800028c:	fa01 f202 	lsl.w	r2, r1, r2
 8000290:	43d2      	mvns	r2, r2
 8000292:	4611      	mov	r1, r2
 8000294:	4a1c      	ldr	r2, [pc, #112]	; (8000308 <GPIO_voidSetPinDirection+0x198>)
 8000296:	400b      	ands	r3, r1
 8000298:	6013      	str	r3, [r2, #0]
		                GPIO_C_PORT->CRL |=  ((Copy_u8Mode) << (Copy_u8Pin * 4));
 800029a:	4b1b      	ldr	r3, [pc, #108]	; (8000308 <GPIO_voidSetPinDirection+0x198>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	7979      	ldrb	r1, [r7, #5]
 80002a0:	79ba      	ldrb	r2, [r7, #6]
 80002a2:	0092      	lsls	r2, r2, #2
 80002a4:	fa01 f202 	lsl.w	r2, r1, r2
 80002a8:	4611      	mov	r1, r2
 80002aa:	4a17      	ldr	r2, [pc, #92]	; (8000308 <GPIO_voidSetPinDirection+0x198>)
 80002ac:	430b      	orrs	r3, r1
 80002ae:	6013      	str	r3, [r2, #0]
		            break;
 80002b0:	e020      	b.n	80002f4 <GPIO_voidSetPinDirection+0x184>
		            else if (Copy_u8Pin <= 15)
 80002b2:	79bb      	ldrb	r3, [r7, #6]
 80002b4:	2b0f      	cmp	r3, #15
 80002b6:	d81d      	bhi.n	80002f4 <GPIO_voidSetPinDirection+0x184>
		                GPIO_C_PORT->CRH &= ~((0b1111)      << ((Copy_u8Pin - 8) * 4));
 80002b8:	4b13      	ldr	r3, [pc, #76]	; (8000308 <GPIO_voidSetPinDirection+0x198>)
 80002ba:	685b      	ldr	r3, [r3, #4]
 80002bc:	79ba      	ldrb	r2, [r7, #6]
 80002be:	3a08      	subs	r2, #8
 80002c0:	0092      	lsls	r2, r2, #2
 80002c2:	210f      	movs	r1, #15
 80002c4:	fa01 f202 	lsl.w	r2, r1, r2
 80002c8:	43d2      	mvns	r2, r2
 80002ca:	4611      	mov	r1, r2
 80002cc:	4a0e      	ldr	r2, [pc, #56]	; (8000308 <GPIO_voidSetPinDirection+0x198>)
 80002ce:	400b      	ands	r3, r1
 80002d0:	6053      	str	r3, [r2, #4]
		                GPIO_C_PORT->CRH |=  ((Copy_u8Mode) << ((Copy_u8Pin - 8) * 4));
 80002d2:	4b0d      	ldr	r3, [pc, #52]	; (8000308 <GPIO_voidSetPinDirection+0x198>)
 80002d4:	685b      	ldr	r3, [r3, #4]
 80002d6:	7979      	ldrb	r1, [r7, #5]
 80002d8:	79ba      	ldrb	r2, [r7, #6]
 80002da:	3a08      	subs	r2, #8
 80002dc:	0092      	lsls	r2, r2, #2
 80002de:	fa01 f202 	lsl.w	r2, r1, r2
 80002e2:	4611      	mov	r1, r2
 80002e4:	4a08      	ldr	r2, [pc, #32]	; (8000308 <GPIO_voidSetPinDirection+0x198>)
 80002e6:	430b      	orrs	r3, r1
 80002e8:	6053      	str	r3, [r2, #4]
		            break;
 80002ea:	e003      	b.n	80002f4 <GPIO_voidSetPinDirection+0x184>
		            break;
 80002ec:	bf00      	nop
 80002ee:	e002      	b.n	80002f6 <GPIO_voidSetPinDirection+0x186>
		            break;
 80002f0:	bf00      	nop
 80002f2:	e000      	b.n	80002f6 <GPIO_voidSetPinDirection+0x186>
		            break;
 80002f4:	bf00      	nop
	}
	else
	    {
	        /* DO NOTHING; ERROR handling */
	    }
}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr
 8000300:	40010800 	.word	0x40010800
 8000304:	40010c00 	.word	0x40010c00
 8000308:	40011000 	.word	0x40011000

0800030c <GPIO_voidTogglePinValue>:
 * reentrant:	Reentrant function
 * input:		port, pin
 * output:		None
 */
void  GPIO_voidTogglePinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	460a      	mov	r2, r1
 8000316:	71fb      	strb	r3, [r7, #7]
 8000318:	4613      	mov	r3, r2
 800031a:	71bb      	strb	r3, [r7, #6]
	if(Copy_u8Port < 3)
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	2b02      	cmp	r3, #2
 8000320:	d828      	bhi.n	8000374 <GPIO_voidTogglePinValue+0x68>
	{
		switch (Copy_u8Port)
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d00f      	beq.n	8000348 <GPIO_voidTogglePinValue+0x3c>
 8000328:	2b02      	cmp	r3, #2
 800032a:	d018      	beq.n	800035e <GPIO_voidTogglePinValue+0x52>
 800032c:	2b00      	cmp	r3, #0
 800032e:	d000      	beq.n	8000332 <GPIO_voidTogglePinValue+0x26>
			case GPIO_C:
			  TOG_BIT(GPIO_C_PORT->ODR,Copy_u8Pin);
			  break;

			default :
				break;
 8000330:	e020      	b.n	8000374 <GPIO_voidTogglePinValue+0x68>
						TOG_BIT(GPIO_A_PORT->ODR,Copy_u8Pin);
 8000332:	4b13      	ldr	r3, [pc, #76]	; (8000380 <GPIO_voidTogglePinValue+0x74>)
 8000334:	68db      	ldr	r3, [r3, #12]
 8000336:	79ba      	ldrb	r2, [r7, #6]
 8000338:	2101      	movs	r1, #1
 800033a:	fa01 f202 	lsl.w	r2, r1, r2
 800033e:	4611      	mov	r1, r2
 8000340:	4a0f      	ldr	r2, [pc, #60]	; (8000380 <GPIO_voidTogglePinValue+0x74>)
 8000342:	404b      	eors	r3, r1
 8000344:	60d3      	str	r3, [r2, #12]
			  break;
 8000346:	e015      	b.n	8000374 <GPIO_voidTogglePinValue+0x68>
						TOG_BIT(GPIO_B_PORT->ODR,Copy_u8Pin);
 8000348:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <GPIO_voidTogglePinValue+0x78>)
 800034a:	68db      	ldr	r3, [r3, #12]
 800034c:	79ba      	ldrb	r2, [r7, #6]
 800034e:	2101      	movs	r1, #1
 8000350:	fa01 f202 	lsl.w	r2, r1, r2
 8000354:	4611      	mov	r1, r2
 8000356:	4a0b      	ldr	r2, [pc, #44]	; (8000384 <GPIO_voidTogglePinValue+0x78>)
 8000358:	404b      	eors	r3, r1
 800035a:	60d3      	str	r3, [r2, #12]
			  break;
 800035c:	e00a      	b.n	8000374 <GPIO_voidTogglePinValue+0x68>
			  TOG_BIT(GPIO_C_PORT->ODR,Copy_u8Pin);
 800035e:	4b0a      	ldr	r3, [pc, #40]	; (8000388 <GPIO_voidTogglePinValue+0x7c>)
 8000360:	68db      	ldr	r3, [r3, #12]
 8000362:	79ba      	ldrb	r2, [r7, #6]
 8000364:	2101      	movs	r1, #1
 8000366:	fa01 f202 	lsl.w	r2, r1, r2
 800036a:	4611      	mov	r1, r2
 800036c:	4a06      	ldr	r2, [pc, #24]	; (8000388 <GPIO_voidTogglePinValue+0x7c>)
 800036e:	404b      	eors	r3, r1
 8000370:	60d3      	str	r3, [r2, #12]
			  break;
 8000372:	bf00      	nop
	}
	else
	{
		/* DO NOTHING; ERROR handling */
	}
}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	bc80      	pop	{r7}
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	40010800 	.word	0x40010800
 8000384:	40010c00 	.word	0x40010c00
 8000388:	40011000 	.word	0x40011000

0800038c <RCC_voidInitSysClock>:
 * reentrant:	Non Reentrant function
 * input:		void
 * output:		void
 */
void RCC_voidInitSysClock(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
    #if     RCC_CLOCK_TYPE == RCC_HSI
        CLR_BIT(RCC->CFGR,0);     /* HSI selected as system clock */
        CLR_BIT(RCC->CFGR,1);
    	SET_BIT(RCC->CR, 0);	   /* Enable HSI + Trimming = 0 */
    #elif   RCC_CLOCK_TYPE == RCC_HSE_CRYSTAL
        SET_BIT(RCC->CFGR,0);	  /* HSE selected as system clock */
 8000390:	4b0d      	ldr	r3, [pc, #52]	; (80003c8 <RCC_voidInitSysClock+0x3c>)
 8000392:	685b      	ldr	r3, [r3, #4]
 8000394:	4a0c      	ldr	r2, [pc, #48]	; (80003c8 <RCC_voidInitSysClock+0x3c>)
 8000396:	f043 0301 	orr.w	r3, r3, #1
 800039a:	6053      	str	r3, [r2, #4]
        CLR_BIT(RCC->CFGR,1);
 800039c:	4b0a      	ldr	r3, [pc, #40]	; (80003c8 <RCC_voidInitSysClock+0x3c>)
 800039e:	685b      	ldr	r3, [r3, #4]
 80003a0:	4a09      	ldr	r2, [pc, #36]	; (80003c8 <RCC_voidInitSysClock+0x3c>)
 80003a2:	f023 0302 	bic.w	r3, r3, #2
 80003a6:	6053      	str	r3, [r2, #4]
		CLR_BIT(RCC->CR, 18);	  /* Enable HSE with no bypass */
 80003a8:	4b07      	ldr	r3, [pc, #28]	; (80003c8 <RCC_voidInitSysClock+0x3c>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a06      	ldr	r2, [pc, #24]	; (80003c8 <RCC_voidInitSysClock+0x3c>)
 80003ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003b2:	6013      	str	r3, [r2, #0]
    	SET_BIT(RCC->CR, 16);
 80003b4:	4b04      	ldr	r3, [pc, #16]	; (80003c8 <RCC_voidInitSysClock+0x3c>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a03      	ldr	r2, [pc, #12]	; (80003c8 <RCC_voidInitSysClock+0x3c>)
 80003ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003be:	6013      	str	r3, [r2, #0]
		SET_BIT(RCC->CR, 24);
		while(GET_BIT(RCC->CR,25)== 0){}
    #else
        #error("Wrong Clock configuration")
    #endif
}
 80003c0:	bf00      	nop
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr
 80003c8:	40021000 	.word	0x40021000

080003cc <RCC_voidEnableClock>:
 * reentrant:	Non Reentrant function
 * input:		BUS_id, peripheral_id
 * output:		void
 */
void RCC_voidEnableClock(uint8 Copy_u8BusId, uint16 Copy_u8PerId)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	460a      	mov	r2, r1
 80003d6:	71fb      	strb	r3, [r7, #7]
 80003d8:	4613      	mov	r3, r2
 80003da:	80bb      	strh	r3, [r7, #4]
    if (Copy_u8PerId <= 31)
 80003dc:	88bb      	ldrh	r3, [r7, #4]
 80003de:	2b1f      	cmp	r3, #31
 80003e0:	d828      	bhi.n	8000434 <RCC_voidEnableClock+0x68>
    {
        switch (Copy_u8BusId)
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d00f      	beq.n	8000408 <RCC_voidEnableClock+0x3c>
 80003e8:	2b02      	cmp	r3, #2
 80003ea:	d018      	beq.n	800041e <RCC_voidEnableClock+0x52>
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d000      	beq.n	80003f2 <RCC_voidEnableClock+0x26>

    else
    {
        /* DO NOTHING; ERROR handling */
    }
}
 80003f0:	e020      	b.n	8000434 <RCC_voidEnableClock+0x68>
            	SET_BIT(RCC->AHBENR  ,Copy_u8PerId);
 80003f2:	4b13      	ldr	r3, [pc, #76]	; (8000440 <RCC_voidEnableClock+0x74>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	88ba      	ldrh	r2, [r7, #4]
 80003f8:	2101      	movs	r1, #1
 80003fa:	fa01 f202 	lsl.w	r2, r1, r2
 80003fe:	4611      	mov	r1, r2
 8000400:	4a0f      	ldr	r2, [pc, #60]	; (8000440 <RCC_voidEnableClock+0x74>)
 8000402:	430b      	orrs	r3, r1
 8000404:	6153      	str	r3, [r2, #20]
            	break;
 8000406:	e015      	b.n	8000434 <RCC_voidEnableClock+0x68>
            	SET_BIT(RCC->APB1ENR ,Copy_u8PerId);
 8000408:	4b0d      	ldr	r3, [pc, #52]	; (8000440 <RCC_voidEnableClock+0x74>)
 800040a:	69db      	ldr	r3, [r3, #28]
 800040c:	88ba      	ldrh	r2, [r7, #4]
 800040e:	2101      	movs	r1, #1
 8000410:	fa01 f202 	lsl.w	r2, r1, r2
 8000414:	4611      	mov	r1, r2
 8000416:	4a0a      	ldr	r2, [pc, #40]	; (8000440 <RCC_voidEnableClock+0x74>)
 8000418:	430b      	orrs	r3, r1
 800041a:	61d3      	str	r3, [r2, #28]
            	break;
 800041c:	e00a      	b.n	8000434 <RCC_voidEnableClock+0x68>
            	SET_BIT(RCC->APB2ENR ,Copy_u8PerId);
 800041e:	4b08      	ldr	r3, [pc, #32]	; (8000440 <RCC_voidEnableClock+0x74>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	88ba      	ldrh	r2, [r7, #4]
 8000424:	2101      	movs	r1, #1
 8000426:	fa01 f202 	lsl.w	r2, r1, r2
 800042a:	4611      	mov	r1, r2
 800042c:	4a04      	ldr	r2, [pc, #16]	; (8000440 <RCC_voidEnableClock+0x74>)
 800042e:	430b      	orrs	r3, r1
 8000430:	6193      	str	r3, [r2, #24]
            	break;
 8000432:	bf00      	nop
}
 8000434:	bf00      	nop
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	bc80      	pop	{r7}
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	40021000 	.word	0x40021000

08000444 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
	RCC_voidInitSysClock();
 800044a:	f7ff ff9f 	bl	800038c <RCC_voidInitSysClock>
	RCC_voidEnableClock(RCC_APB2, APB2_GPIOA_EN);
 800044e:	2102      	movs	r1, #2
 8000450:	2002      	movs	r0, #2
 8000452:	f7ff ffbb 	bl	80003cc <RCC_voidEnableClock>
    GPIO_voidSetPinDirection(GPIO_A, PIN_2, OUTPUT_SPEED_2MHZ_PUSH_PULL);
 8000456:	2202      	movs	r2, #2
 8000458:	2102      	movs	r1, #2
 800045a:	2000      	movs	r0, #0
 800045c:	f7ff fe88 	bl	8000170 <GPIO_voidSetPinDirection>

    while(1)
    {
    	GPIO_voidTogglePinValue(GPIO_A, PIN_2);
 8000460:	2102      	movs	r1, #2
 8000462:	2000      	movs	r0, #0
 8000464:	f7ff ff52 	bl	800030c <GPIO_voidTogglePinValue>
    	for(int i = 0; i < 50000; i++);
 8000468:	2300      	movs	r3, #0
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	e002      	b.n	8000474 <main+0x30>
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	3301      	adds	r3, #1
 8000472:	607b      	str	r3, [r7, #4]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800047a:	4293      	cmp	r3, r2
 800047c:	ddf7      	ble.n	800046e <main+0x2a>
    	GPIO_voidTogglePinValue(GPIO_A, PIN_2);
 800047e:	e7ef      	b.n	8000460 <main+0x1c>

08000480 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000480:	480d      	ldr	r0, [pc, #52]	; (80004b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000482:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000484:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000488:	480c      	ldr	r0, [pc, #48]	; (80004bc <LoopForever+0x6>)
  ldr r1, =_edata
 800048a:	490d      	ldr	r1, [pc, #52]	; (80004c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800048c:	4a0d      	ldr	r2, [pc, #52]	; (80004c4 <LoopForever+0xe>)
  movs r3, #0
 800048e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000490:	e002      	b.n	8000498 <LoopCopyDataInit>

08000492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000496:	3304      	adds	r3, #4

08000498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800049a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800049c:	d3f9      	bcc.n	8000492 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800049e:	4a0a      	ldr	r2, [pc, #40]	; (80004c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004a0:	4c0a      	ldr	r4, [pc, #40]	; (80004cc <LoopForever+0x16>)
  movs r3, #0
 80004a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004a4:	e001      	b.n	80004aa <LoopFillZerobss>

080004a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004a8:	3204      	adds	r2, #4

080004aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004ac:	d3fb      	bcc.n	80004a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004ae:	f000 f811 	bl	80004d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004b2:	f7ff ffc7 	bl	8000444 <main>

080004b6 <LoopForever>:

LoopForever:
  b LoopForever
 80004b6:	e7fe      	b.n	80004b6 <LoopForever>
  ldr   r0, =_estack
 80004b8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80004bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004c0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004c4:	0800053c 	.word	0x0800053c
  ldr r2, =_sbss
 80004c8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004cc:	2000001c 	.word	0x2000001c

080004d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004d0:	e7fe      	b.n	80004d0 <ADC1_2_IRQHandler>
	...

080004d4 <__libc_init_array>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	2500      	movs	r5, #0
 80004d8:	4e0c      	ldr	r6, [pc, #48]	; (800050c <__libc_init_array+0x38>)
 80004da:	4c0d      	ldr	r4, [pc, #52]	; (8000510 <__libc_init_array+0x3c>)
 80004dc:	1ba4      	subs	r4, r4, r6
 80004de:	10a4      	asrs	r4, r4, #2
 80004e0:	42a5      	cmp	r5, r4
 80004e2:	d109      	bne.n	80004f8 <__libc_init_array+0x24>
 80004e4:	f000 f81a 	bl	800051c <_init>
 80004e8:	2500      	movs	r5, #0
 80004ea:	4e0a      	ldr	r6, [pc, #40]	; (8000514 <__libc_init_array+0x40>)
 80004ec:	4c0a      	ldr	r4, [pc, #40]	; (8000518 <__libc_init_array+0x44>)
 80004ee:	1ba4      	subs	r4, r4, r6
 80004f0:	10a4      	asrs	r4, r4, #2
 80004f2:	42a5      	cmp	r5, r4
 80004f4:	d105      	bne.n	8000502 <__libc_init_array+0x2e>
 80004f6:	bd70      	pop	{r4, r5, r6, pc}
 80004f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004fc:	4798      	blx	r3
 80004fe:	3501      	adds	r5, #1
 8000500:	e7ee      	b.n	80004e0 <__libc_init_array+0xc>
 8000502:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000506:	4798      	blx	r3
 8000508:	3501      	adds	r5, #1
 800050a:	e7f2      	b.n	80004f2 <__libc_init_array+0x1e>
 800050c:	08000534 	.word	0x08000534
 8000510:	08000534 	.word	0x08000534
 8000514:	08000534 	.word	0x08000534
 8000518:	08000538 	.word	0x08000538

0800051c <_init>:
 800051c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800051e:	bf00      	nop
 8000520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000522:	bc08      	pop	{r3}
 8000524:	469e      	mov	lr, r3
 8000526:	4770      	bx	lr

08000528 <_fini>:
 8000528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800052a:	bf00      	nop
 800052c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800052e:	bc08      	pop	{r3}
 8000530:	469e      	mov	lr, r3
 8000532:	4770      	bx	lr
