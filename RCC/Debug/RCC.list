
RCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001e4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000314  0800031c  0001031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000314  08000314  0001031c  2**0
                  CONTENTS
  4 .ARM          00000000  08000314  08000314  0001031c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000314  0800031c  0001031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000314  08000314  00010314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000318  08000318  00010318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800031c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800031c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001031c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000284  00000000  00000000  00010345  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000120  00000000  00000000  000105c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000078  00000000  00000000  000106f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000050  00000000  00000000  00010768  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000010cb  00000000  00000000  000107b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000066a  00000000  00000000  00011883  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003fb8  00000000  00000000  00011eed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00015ea5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000e0  00000000  00000000  00015f20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080002fc 	.word	0x080002fc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080002fc 	.word	0x080002fc

08000170 <RCC_voidInitSysClock>:
 * reentrant:	Non Reentrant function
 * input:		void
 * output:		void
 */
void RCC_voidInitSysClock(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
    #if     RCC_CLOCK_TYPE == RCC_HSI
        CLR_BIT(RCC->CFGR,0);     /* HSI selected as system clock */
        CLR_BIT(RCC->CFGR,1);
    	SET_BIT(RCC->CR, 0);	   /* Enable HSI + Trimming = 0 */
    #elif   RCC_CLOCK_TYPE == RCC_HSE_CRYSTAL
        SET_BIT(RCC->CFGR,0);	  /* HSE selected as system clock */
 8000174:	4b0d      	ldr	r3, [pc, #52]	; (80001ac <RCC_voidInitSysClock+0x3c>)
 8000176:	685b      	ldr	r3, [r3, #4]
 8000178:	4a0c      	ldr	r2, [pc, #48]	; (80001ac <RCC_voidInitSysClock+0x3c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6053      	str	r3, [r2, #4]
        CLR_BIT(RCC->CFGR,1);
 8000180:	4b0a      	ldr	r3, [pc, #40]	; (80001ac <RCC_voidInitSysClock+0x3c>)
 8000182:	685b      	ldr	r3, [r3, #4]
 8000184:	4a09      	ldr	r2, [pc, #36]	; (80001ac <RCC_voidInitSysClock+0x3c>)
 8000186:	f023 0302 	bic.w	r3, r3, #2
 800018a:	6053      	str	r3, [r2, #4]
		CLR_BIT(RCC->CR, 18);	  /* Enable HSE with no bypass */
 800018c:	4b07      	ldr	r3, [pc, #28]	; (80001ac <RCC_voidInitSysClock+0x3c>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a06      	ldr	r2, [pc, #24]	; (80001ac <RCC_voidInitSysClock+0x3c>)
 8000192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000196:	6013      	str	r3, [r2, #0]
    	SET_BIT(RCC->CR, 16);
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <RCC_voidInitSysClock+0x3c>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a03      	ldr	r2, [pc, #12]	; (80001ac <RCC_voidInitSysClock+0x3c>)
 800019e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001a2:	6013      	str	r3, [r2, #0]
		SET_BIT(RCC->CR, 24);
		while(GET_BIT(RCC->CR,25)== 0){}
    #else
        #error("Wrong Clock configuration")
    #endif
}
 80001a4:	bf00      	nop
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	40021000 	.word	0x40021000

080001b0 <RCC_voidEnableClock>:
 * reentrant:	Non Reentrant function
 * input:		BUS_id, peripheral_id
 * output:		void
 */
void RCC_voidEnableClock(uint8 Copy_u8BusId, uint16 Copy_u8PerId)
{
 80001b0:	b480      	push	{r7}
 80001b2:	b083      	sub	sp, #12
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	4603      	mov	r3, r0
 80001b8:	460a      	mov	r2, r1
 80001ba:	71fb      	strb	r3, [r7, #7]
 80001bc:	4613      	mov	r3, r2
 80001be:	80bb      	strh	r3, [r7, #4]
    if (Copy_u8PerId <= 31)
 80001c0:	88bb      	ldrh	r3, [r7, #4]
 80001c2:	2b1f      	cmp	r3, #31
 80001c4:	d828      	bhi.n	8000218 <RCC_voidEnableClock+0x68>
    {
        switch (Copy_u8BusId)
 80001c6:	79fb      	ldrb	r3, [r7, #7]
 80001c8:	2b01      	cmp	r3, #1
 80001ca:	d00f      	beq.n	80001ec <RCC_voidEnableClock+0x3c>
 80001cc:	2b02      	cmp	r3, #2
 80001ce:	d018      	beq.n	8000202 <RCC_voidEnableClock+0x52>
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d000      	beq.n	80001d6 <RCC_voidEnableClock+0x26>
            	break;
            case RCC_APB2 :
            	SET_BIT(RCC->APB2ENR ,Copy_u8PerId);
            	break;
            default	:
            	break;
 80001d4:	e020      	b.n	8000218 <RCC_voidEnableClock+0x68>
            	SET_BIT(RCC->AHBENR  ,Copy_u8PerId);
 80001d6:	4b13      	ldr	r3, [pc, #76]	; (8000224 <RCC_voidEnableClock+0x74>)
 80001d8:	695b      	ldr	r3, [r3, #20]
 80001da:	88ba      	ldrh	r2, [r7, #4]
 80001dc:	2101      	movs	r1, #1
 80001de:	fa01 f202 	lsl.w	r2, r1, r2
 80001e2:	4611      	mov	r1, r2
 80001e4:	4a0f      	ldr	r2, [pc, #60]	; (8000224 <RCC_voidEnableClock+0x74>)
 80001e6:	430b      	orrs	r3, r1
 80001e8:	6153      	str	r3, [r2, #20]
            	break;
 80001ea:	e015      	b.n	8000218 <RCC_voidEnableClock+0x68>
            	SET_BIT(RCC->APB1ENR ,Copy_u8PerId);
 80001ec:	4b0d      	ldr	r3, [pc, #52]	; (8000224 <RCC_voidEnableClock+0x74>)
 80001ee:	69db      	ldr	r3, [r3, #28]
 80001f0:	88ba      	ldrh	r2, [r7, #4]
 80001f2:	2101      	movs	r1, #1
 80001f4:	fa01 f202 	lsl.w	r2, r1, r2
 80001f8:	4611      	mov	r1, r2
 80001fa:	4a0a      	ldr	r2, [pc, #40]	; (8000224 <RCC_voidEnableClock+0x74>)
 80001fc:	430b      	orrs	r3, r1
 80001fe:	61d3      	str	r3, [r2, #28]
            	break;
 8000200:	e00a      	b.n	8000218 <RCC_voidEnableClock+0x68>
            	SET_BIT(RCC->APB2ENR ,Copy_u8PerId);
 8000202:	4b08      	ldr	r3, [pc, #32]	; (8000224 <RCC_voidEnableClock+0x74>)
 8000204:	699b      	ldr	r3, [r3, #24]
 8000206:	88ba      	ldrh	r2, [r7, #4]
 8000208:	2101      	movs	r1, #1
 800020a:	fa01 f202 	lsl.w	r2, r1, r2
 800020e:	4611      	mov	r1, r2
 8000210:	4a04      	ldr	r2, [pc, #16]	; (8000224 <RCC_voidEnableClock+0x74>)
 8000212:	430b      	orrs	r3, r1
 8000214:	6193      	str	r3, [r2, #24]
            	break;
 8000216:	bf00      	nop

    else
    {
        /* DO NOTHING; ERROR handling */
    }
}
 8000218:	bf00      	nop
 800021a:	370c      	adds	r7, #12
 800021c:	46bd      	mov	sp, r7
 800021e:	bc80      	pop	{r7}
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	40021000 	.word	0x40021000

08000228 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
	RCC_voidInitSysClock();
 800022e:	f7ff ff9f 	bl	8000170 <RCC_voidInitSysClock>
	RCC_voidEnableClock(RCC_APB2, APB2_GPIOA_EN);
 8000232:	2102      	movs	r1, #2
 8000234:	2002      	movs	r0, #2
 8000236:	f7ff ffbb 	bl	80001b0 <RCC_voidEnableClock>

	uint8 x = 10;
 800023a:	230a      	movs	r3, #10
 800023c:	70fb      	strb	r3, [r7, #3]
	ARM_DELAY_MS(1000);
 800023e:	4b07      	ldr	r3, [pc, #28]	; (800025c <main+0x34>)
 8000240:	607b      	str	r3, [r7, #4]
 8000242:	e000      	b.n	8000246 <main+0x1e>
 8000244:	bf00      	nop
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	1e5a      	subs	r2, r3, #1
 800024a:	607a      	str	r2, [r7, #4]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d1f9      	bne.n	8000244 <main+0x1c>

	return 0;
 8000250:	2300      	movs	r3, #0
}
 8000252:	4618      	mov	r0, r3
 8000254:	3708      	adds	r7, #8
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	0007a120 	.word	0x0007a120

08000260 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000260:	480d      	ldr	r0, [pc, #52]	; (8000298 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000262:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000264:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000268:	480c      	ldr	r0, [pc, #48]	; (800029c <LoopForever+0x6>)
  ldr r1, =_edata
 800026a:	490d      	ldr	r1, [pc, #52]	; (80002a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800026c:	4a0d      	ldr	r2, [pc, #52]	; (80002a4 <LoopForever+0xe>)
  movs r3, #0
 800026e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000270:	e002      	b.n	8000278 <LoopCopyDataInit>

08000272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000276:	3304      	adds	r3, #4

08000278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800027a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800027c:	d3f9      	bcc.n	8000272 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800027e:	4a0a      	ldr	r2, [pc, #40]	; (80002a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000280:	4c0a      	ldr	r4, [pc, #40]	; (80002ac <LoopForever+0x16>)
  movs r3, #0
 8000282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000284:	e001      	b.n	800028a <LoopFillZerobss>

08000286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000288:	3204      	adds	r2, #4

0800028a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800028a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800028c:	d3fb      	bcc.n	8000286 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800028e:	f000 f811 	bl	80002b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000292:	f7ff ffc9 	bl	8000228 <main>

08000296 <LoopForever>:

LoopForever:
  b LoopForever
 8000296:	e7fe      	b.n	8000296 <LoopForever>
  ldr   r0, =_estack
 8000298:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800029c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002a0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002a4:	0800031c 	.word	0x0800031c
  ldr r2, =_sbss
 80002a8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002ac:	2000001c 	.word	0x2000001c

080002b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002b0:	e7fe      	b.n	80002b0 <ADC1_2_IRQHandler>
	...

080002b4 <__libc_init_array>:
 80002b4:	b570      	push	{r4, r5, r6, lr}
 80002b6:	2500      	movs	r5, #0
 80002b8:	4e0c      	ldr	r6, [pc, #48]	; (80002ec <__libc_init_array+0x38>)
 80002ba:	4c0d      	ldr	r4, [pc, #52]	; (80002f0 <__libc_init_array+0x3c>)
 80002bc:	1ba4      	subs	r4, r4, r6
 80002be:	10a4      	asrs	r4, r4, #2
 80002c0:	42a5      	cmp	r5, r4
 80002c2:	d109      	bne.n	80002d8 <__libc_init_array+0x24>
 80002c4:	f000 f81a 	bl	80002fc <_init>
 80002c8:	2500      	movs	r5, #0
 80002ca:	4e0a      	ldr	r6, [pc, #40]	; (80002f4 <__libc_init_array+0x40>)
 80002cc:	4c0a      	ldr	r4, [pc, #40]	; (80002f8 <__libc_init_array+0x44>)
 80002ce:	1ba4      	subs	r4, r4, r6
 80002d0:	10a4      	asrs	r4, r4, #2
 80002d2:	42a5      	cmp	r5, r4
 80002d4:	d105      	bne.n	80002e2 <__libc_init_array+0x2e>
 80002d6:	bd70      	pop	{r4, r5, r6, pc}
 80002d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002dc:	4798      	blx	r3
 80002de:	3501      	adds	r5, #1
 80002e0:	e7ee      	b.n	80002c0 <__libc_init_array+0xc>
 80002e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002e6:	4798      	blx	r3
 80002e8:	3501      	adds	r5, #1
 80002ea:	e7f2      	b.n	80002d2 <__libc_init_array+0x1e>
 80002ec:	08000314 	.word	0x08000314
 80002f0:	08000314 	.word	0x08000314
 80002f4:	08000314 	.word	0x08000314
 80002f8:	08000318 	.word	0x08000318

080002fc <_init>:
 80002fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002fe:	bf00      	nop
 8000300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000302:	bc08      	pop	{r3}
 8000304:	469e      	mov	lr, r3
 8000306:	4770      	bx	lr

08000308 <_fini>:
 8000308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800030a:	bf00      	nop
 800030c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800030e:	bc08      	pop	{r3}
 8000310:	469e      	mov	lr, r3
 8000312:	4770      	bx	lr
