
EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002e0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000410  08000418  00010418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000410  08000410  00010418  2**0
                  CONTENTS
  4 .ARM          00000000  08000410  08000410  00010418  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000410  08000418  00010418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000410  08000410  00010410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000414  08000414  00010414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000000  08000418  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08000418  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010418  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000033a  00000000  00000000  00010441  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000016d  00000000  00000000  0001077b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000b8  00000000  00000000  000108e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000090  00000000  00000000  000109a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000b5b  00000000  00000000  00010a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000027a  00000000  00000000  0001158b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000311d  00000000  00000000  00011805  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00014922  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001d0  00000000  00000000  000149a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080003f8 	.word	0x080003f8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080003f8 	.word	0x080003f8

08000170 <EXTI0_IRQHandler>:
{
	SET_BIT(EXTI-> SWIER, EXTILine_n);
}

void EXTI0_IRQHandler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	if(EXTI_CallBack[EXTI_LINE0] != NULL_PTR)
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <EXTI0_IRQHandler+0x24>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b00      	cmp	r3, #0
 800017a:	d002      	beq.n	8000182 <EXTI0_IRQHandler+0x12>
	{
		EXTI_CallBack[EXTI_LINE0]();
 800017c:	4b05      	ldr	r3, [pc, #20]	; (8000194 <EXTI0_IRQHandler+0x24>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	4798      	blx	r3
	}
	SET_BIT(EXTI-> PR, EXTI_LINE0);	/*	CLEAR interrupt flag	*/
 8000182:	4b05      	ldr	r3, [pc, #20]	; (8000198 <EXTI0_IRQHandler+0x28>)
 8000184:	695b      	ldr	r3, [r3, #20]
 8000186:	4a04      	ldr	r2, [pc, #16]	; (8000198 <EXTI0_IRQHandler+0x28>)
 8000188:	f043 0301 	orr.w	r3, r3, #1
 800018c:	6153      	str	r3, [r2, #20]
}
 800018e:	bf00      	nop
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	2000001c 	.word	0x2000001c
 8000198:	40010400 	.word	0x40010400

0800019c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0
	if(EXTI_CallBack[EXTI_LINE1] != NULL_PTR)
 80001a0:	4b07      	ldr	r3, [pc, #28]	; (80001c0 <EXTI1_IRQHandler+0x24>)
 80001a2:	685b      	ldr	r3, [r3, #4]
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d002      	beq.n	80001ae <EXTI1_IRQHandler+0x12>
	{
		EXTI_CallBack[EXTI_LINE1]();
 80001a8:	4b05      	ldr	r3, [pc, #20]	; (80001c0 <EXTI1_IRQHandler+0x24>)
 80001aa:	685b      	ldr	r3, [r3, #4]
 80001ac:	4798      	blx	r3
	}
	SET_BIT(EXTI-> PR, EXTI_LINE1);	/*	CLEAR interrupt flag	*/
 80001ae:	4b05      	ldr	r3, [pc, #20]	; (80001c4 <EXTI1_IRQHandler+0x28>)
 80001b0:	695b      	ldr	r3, [r3, #20]
 80001b2:	4a04      	ldr	r2, [pc, #16]	; (80001c4 <EXTI1_IRQHandler+0x28>)
 80001b4:	f043 0302 	orr.w	r3, r3, #2
 80001b8:	6153      	str	r3, [r2, #20]
}
 80001ba:	bf00      	nop
 80001bc:	bd80      	pop	{r7, pc}
 80001be:	bf00      	nop
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	40010400 	.word	0x40010400

080001c8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	if(EXTI_CallBack[EXTI_LINE2] != NULL_PTR)
 80001cc:	4b07      	ldr	r3, [pc, #28]	; (80001ec <EXTI2_IRQHandler+0x24>)
 80001ce:	689b      	ldr	r3, [r3, #8]
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d002      	beq.n	80001da <EXTI2_IRQHandler+0x12>
	{
		EXTI_CallBack[EXTI_LINE2]();
 80001d4:	4b05      	ldr	r3, [pc, #20]	; (80001ec <EXTI2_IRQHandler+0x24>)
 80001d6:	689b      	ldr	r3, [r3, #8]
 80001d8:	4798      	blx	r3
	}
	SET_BIT(EXTI-> PR, EXTI_LINE2);	/*	CLEAR interrupt flag	*/
 80001da:	4b05      	ldr	r3, [pc, #20]	; (80001f0 <EXTI2_IRQHandler+0x28>)
 80001dc:	695b      	ldr	r3, [r3, #20]
 80001de:	4a04      	ldr	r2, [pc, #16]	; (80001f0 <EXTI2_IRQHandler+0x28>)
 80001e0:	f043 0304 	orr.w	r3, r3, #4
 80001e4:	6153      	str	r3, [r2, #20]
}
 80001e6:	bf00      	nop
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	2000001c 	.word	0x2000001c
 80001f0:	40010400 	.word	0x40010400

080001f4 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
	if(EXTI_CallBack[EXTI_LINE3] != NULL_PTR)
 80001f8:	4b07      	ldr	r3, [pc, #28]	; (8000218 <EXTI3_IRQHandler+0x24>)
 80001fa:	68db      	ldr	r3, [r3, #12]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d002      	beq.n	8000206 <EXTI3_IRQHandler+0x12>
	{
		EXTI_CallBack[EXTI_LINE3]();
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <EXTI3_IRQHandler+0x24>)
 8000202:	68db      	ldr	r3, [r3, #12]
 8000204:	4798      	blx	r3
	}
	SET_BIT(EXTI-> PR, EXTI_LINE3);	/*	CLEAR interrupt flag	*/
 8000206:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI3_IRQHandler+0x28>)
 8000208:	695b      	ldr	r3, [r3, #20]
 800020a:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI3_IRQHandler+0x28>)
 800020c:	f043 0308 	orr.w	r3, r3, #8
 8000210:	6153      	str	r3, [r2, #20]
}
 8000212:	bf00      	nop
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	2000001c 	.word	0x2000001c
 800021c:	40010400 	.word	0x40010400

08000220 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	if(EXTI_CallBack[EXTI_LINE4] != NULL_PTR)
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <EXTI4_IRQHandler+0x24>)
 8000226:	691b      	ldr	r3, [r3, #16]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d002      	beq.n	8000232 <EXTI4_IRQHandler+0x12>
	{
		EXTI_CallBack[EXTI_LINE4]();
 800022c:	4b05      	ldr	r3, [pc, #20]	; (8000244 <EXTI4_IRQHandler+0x24>)
 800022e:	691b      	ldr	r3, [r3, #16]
 8000230:	4798      	blx	r3
	}
	SET_BIT(EXTI-> PR, EXTI_LINE4);	/*	CLEAR interrupt flag	*/
 8000232:	4b05      	ldr	r3, [pc, #20]	; (8000248 <EXTI4_IRQHandler+0x28>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	4a04      	ldr	r2, [pc, #16]	; (8000248 <EXTI4_IRQHandler+0x28>)
 8000238:	f043 0310 	orr.w	r3, r3, #16
 800023c:	6153      	str	r3, [r2, #20]
}
 800023e:	bf00      	nop
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	2000001c 	.word	0x2000001c
 8000248:	40010400 	.word	0x40010400

0800024c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
	uint8 Local_EXTIn = 0;
 8000252:	2300      	movs	r3, #0
 8000254:	71bb      	strb	r3, [r7, #6]
	uint8 Local_counter = 0;
 8000256:	2300      	movs	r3, #0
 8000258:	71fb      	strb	r3, [r7, #7]

	for(Local_counter = EXTI_LINE5; Local_counter <= EXTI_LINE9; Local_counter++)
 800025a:	2305      	movs	r3, #5
 800025c:	71fb      	strb	r3, [r7, #7]
 800025e:	e025      	b.n	80002ac <EXTI9_5_IRQHandler+0x60>
	{
		Local_EXTIn = GET_BIT(EXTI-> PR, Local_counter);	/*	check for active IRQ	*/
 8000260:	4b19      	ldr	r3, [pc, #100]	; (80002c8 <EXTI9_5_IRQHandler+0x7c>)
 8000262:	695a      	ldr	r2, [r3, #20]
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	fa22 f303 	lsr.w	r3, r2, r3
 800026a:	b2db      	uxtb	r3, r3
 800026c:	f003 0301 	and.w	r3, r3, #1
 8000270:	71bb      	strb	r3, [r7, #6]
		if( (Local_EXTIn == 1) && (EXTI_CallBack[Local_counter] != NULL_PTR) )
 8000272:	79bb      	ldrb	r3, [r7, #6]
 8000274:	2b01      	cmp	r3, #1
 8000276:	d10a      	bne.n	800028e <EXTI9_5_IRQHandler+0x42>
 8000278:	79fb      	ldrb	r3, [r7, #7]
 800027a:	4a14      	ldr	r2, [pc, #80]	; (80002cc <EXTI9_5_IRQHandler+0x80>)
 800027c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d004      	beq.n	800028e <EXTI9_5_IRQHandler+0x42>
		{
			EXTI_CallBack[Local_counter]();
 8000284:	79fb      	ldrb	r3, [r7, #7]
 8000286:	4a11      	ldr	r2, [pc, #68]	; (80002cc <EXTI9_5_IRQHandler+0x80>)
 8000288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800028c:	4798      	blx	r3
		}
		Local_EXTIn = 0;
 800028e:	2300      	movs	r3, #0
 8000290:	71bb      	strb	r3, [r7, #6]
		SET_BIT(EXTI-> PR, Local_counter);	/*	CLEAR interrupt flag	*/
 8000292:	4b0d      	ldr	r3, [pc, #52]	; (80002c8 <EXTI9_5_IRQHandler+0x7c>)
 8000294:	695b      	ldr	r3, [r3, #20]
 8000296:	79fa      	ldrb	r2, [r7, #7]
 8000298:	2101      	movs	r1, #1
 800029a:	fa01 f202 	lsl.w	r2, r1, r2
 800029e:	4611      	mov	r1, r2
 80002a0:	4a09      	ldr	r2, [pc, #36]	; (80002c8 <EXTI9_5_IRQHandler+0x7c>)
 80002a2:	430b      	orrs	r3, r1
 80002a4:	6153      	str	r3, [r2, #20]
	for(Local_counter = EXTI_LINE5; Local_counter <= EXTI_LINE9; Local_counter++)
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	3301      	adds	r3, #1
 80002aa:	71fb      	strb	r3, [r7, #7]
 80002ac:	79fb      	ldrb	r3, [r7, #7]
 80002ae:	2b09      	cmp	r3, #9
 80002b0:	d9d6      	bls.n	8000260 <EXTI9_5_IRQHandler+0x14>
	}
	EXTI->PR |= 0x3E0;	/*	CLEAR all interrupt flags from EXTI 5->9 just to be sure	*/
 80002b2:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <EXTI9_5_IRQHandler+0x7c>)
 80002b4:	695b      	ldr	r3, [r3, #20]
 80002b6:	4a04      	ldr	r2, [pc, #16]	; (80002c8 <EXTI9_5_IRQHandler+0x7c>)
 80002b8:	f443 7378 	orr.w	r3, r3, #992	; 0x3e0
 80002bc:	6153      	str	r3, [r2, #20]
}
 80002be:	bf00      	nop
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40010400 	.word	0x40010400
 80002cc:	2000001c 	.word	0x2000001c

080002d0 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
	uint8 Local_EXTIn = 0;
 80002d6:	2300      	movs	r3, #0
 80002d8:	71bb      	strb	r3, [r7, #6]
		uint8 Local_counter = 0;
 80002da:	2300      	movs	r3, #0
 80002dc:	71fb      	strb	r3, [r7, #7]

		for(Local_counter = EXTI_LINE10; Local_counter <= EXTI_LINE15; Local_counter++)
 80002de:	230a      	movs	r3, #10
 80002e0:	71fb      	strb	r3, [r7, #7]
 80002e2:	e025      	b.n	8000330 <EXTI15_10_IRQHandler+0x60>
		{
			Local_EXTIn = GET_BIT(EXTI-> PR, Local_counter);	/*	check for active IRQ	*/
 80002e4:	4b19      	ldr	r3, [pc, #100]	; (800034c <EXTI15_10_IRQHandler+0x7c>)
 80002e6:	695a      	ldr	r2, [r3, #20]
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	fa22 f303 	lsr.w	r3, r2, r3
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	f003 0301 	and.w	r3, r3, #1
 80002f4:	71bb      	strb	r3, [r7, #6]
			if( (Local_EXTIn == 1) && (EXTI_CallBack[Local_counter] != NULL_PTR) )
 80002f6:	79bb      	ldrb	r3, [r7, #6]
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d10a      	bne.n	8000312 <EXTI15_10_IRQHandler+0x42>
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	4a14      	ldr	r2, [pc, #80]	; (8000350 <EXTI15_10_IRQHandler+0x80>)
 8000300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d004      	beq.n	8000312 <EXTI15_10_IRQHandler+0x42>
			{
				EXTI_CallBack[Local_counter]();
 8000308:	79fb      	ldrb	r3, [r7, #7]
 800030a:	4a11      	ldr	r2, [pc, #68]	; (8000350 <EXTI15_10_IRQHandler+0x80>)
 800030c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000310:	4798      	blx	r3
			}
			Local_EXTIn = 0;
 8000312:	2300      	movs	r3, #0
 8000314:	71bb      	strb	r3, [r7, #6]
			SET_BIT(EXTI-> PR, Local_counter);	/*	CLEAR interrupt flag	*/
 8000316:	4b0d      	ldr	r3, [pc, #52]	; (800034c <EXTI15_10_IRQHandler+0x7c>)
 8000318:	695b      	ldr	r3, [r3, #20]
 800031a:	79fa      	ldrb	r2, [r7, #7]
 800031c:	2101      	movs	r1, #1
 800031e:	fa01 f202 	lsl.w	r2, r1, r2
 8000322:	4611      	mov	r1, r2
 8000324:	4a09      	ldr	r2, [pc, #36]	; (800034c <EXTI15_10_IRQHandler+0x7c>)
 8000326:	430b      	orrs	r3, r1
 8000328:	6153      	str	r3, [r2, #20]
		for(Local_counter = EXTI_LINE10; Local_counter <= EXTI_LINE15; Local_counter++)
 800032a:	79fb      	ldrb	r3, [r7, #7]
 800032c:	3301      	adds	r3, #1
 800032e:	71fb      	strb	r3, [r7, #7]
 8000330:	79fb      	ldrb	r3, [r7, #7]
 8000332:	2b0f      	cmp	r3, #15
 8000334:	d9d6      	bls.n	80002e4 <EXTI15_10_IRQHandler+0x14>
		}
		EXTI->PR |= 0xFC00;	/*	CLEAR all interrupt flags from EXTI 5->9 just to be sure	*/
 8000336:	4b05      	ldr	r3, [pc, #20]	; (800034c <EXTI15_10_IRQHandler+0x7c>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a04      	ldr	r2, [pc, #16]	; (800034c <EXTI15_10_IRQHandler+0x7c>)
 800033c:	f443 437c 	orr.w	r3, r3, #64512	; 0xfc00
 8000340:	6153      	str	r3, [r2, #20]
}
 8000342:	bf00      	nop
 8000344:	3708      	adds	r7, #8
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40010400 	.word	0x40010400
 8000350:	2000001c 	.word	0x2000001c

08000354 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
    /* Loop forever */
	for(;;);
 8000358:	e7fe      	b.n	8000358 <main+0x4>
	...

0800035c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800035c:	480d      	ldr	r0, [pc, #52]	; (8000394 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800035e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000360:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000364:	480c      	ldr	r0, [pc, #48]	; (8000398 <LoopForever+0x6>)
  ldr r1, =_edata
 8000366:	490d      	ldr	r1, [pc, #52]	; (800039c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000368:	4a0d      	ldr	r2, [pc, #52]	; (80003a0 <LoopForever+0xe>)
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800036c:	e002      	b.n	8000374 <LoopCopyDataInit>

0800036e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000372:	3304      	adds	r3, #4

08000374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000378:	d3f9      	bcc.n	800036e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037a:	4a0a      	ldr	r2, [pc, #40]	; (80003a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800037c:	4c0a      	ldr	r4, [pc, #40]	; (80003a8 <LoopForever+0x16>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000380:	e001      	b.n	8000386 <LoopFillZerobss>

08000382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000384:	3204      	adds	r2, #4

08000386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000388:	d3fb      	bcc.n	8000382 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800038a:	f000 f811 	bl	80003b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800038e:	f7ff ffe1 	bl	8000354 <main>

08000392 <LoopForever>:

LoopForever:
    b LoopForever
 8000392:	e7fe      	b.n	8000392 <LoopForever>
  ldr   r0, =_estack
 8000394:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800039c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003a0:	08000418 	.word	0x08000418
  ldr r2, =_sbss
 80003a4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003a8:	2000005c 	.word	0x2000005c

080003ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003ac:	e7fe      	b.n	80003ac <ADC1_2_IRQHandler>
	...

080003b0 <__libc_init_array>:
 80003b0:	b570      	push	{r4, r5, r6, lr}
 80003b2:	2500      	movs	r5, #0
 80003b4:	4e0c      	ldr	r6, [pc, #48]	; (80003e8 <__libc_init_array+0x38>)
 80003b6:	4c0d      	ldr	r4, [pc, #52]	; (80003ec <__libc_init_array+0x3c>)
 80003b8:	1ba4      	subs	r4, r4, r6
 80003ba:	10a4      	asrs	r4, r4, #2
 80003bc:	42a5      	cmp	r5, r4
 80003be:	d109      	bne.n	80003d4 <__libc_init_array+0x24>
 80003c0:	f000 f81a 	bl	80003f8 <_init>
 80003c4:	2500      	movs	r5, #0
 80003c6:	4e0a      	ldr	r6, [pc, #40]	; (80003f0 <__libc_init_array+0x40>)
 80003c8:	4c0a      	ldr	r4, [pc, #40]	; (80003f4 <__libc_init_array+0x44>)
 80003ca:	1ba4      	subs	r4, r4, r6
 80003cc:	10a4      	asrs	r4, r4, #2
 80003ce:	42a5      	cmp	r5, r4
 80003d0:	d105      	bne.n	80003de <__libc_init_array+0x2e>
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003d8:	4798      	blx	r3
 80003da:	3501      	adds	r5, #1
 80003dc:	e7ee      	b.n	80003bc <__libc_init_array+0xc>
 80003de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003e2:	4798      	blx	r3
 80003e4:	3501      	adds	r5, #1
 80003e6:	e7f2      	b.n	80003ce <__libc_init_array+0x1e>
 80003e8:	08000410 	.word	0x08000410
 80003ec:	08000410 	.word	0x08000410
 80003f0:	08000410 	.word	0x08000410
 80003f4:	08000414 	.word	0x08000414

080003f8 <_init>:
 80003f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fa:	bf00      	nop
 80003fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fe:	bc08      	pop	{r3}
 8000400:	469e      	mov	lr, r3
 8000402:	4770      	bx	lr

08000404 <_fini>:
 8000404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000406:	bf00      	nop
 8000408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040a:	bc08      	pop	{r3}
 800040c:	469e      	mov	lr, r3
 800040e:	4770      	bx	lr
